// Generated by CoffeeScript 1.6.2
(function() {
  var config, createCanvas, drawBackGround, drawBoard, drawBox, drawPlayerHands, drawPlayerWinperAndName, drawcard, executeAjax, setColorAndFont;

  config = {
    viewTestingFlag: false,
    canvasWidth: 640,
    canvasHeight: 360,
    originalCardWidth: 48,
    originalCardHeight: 64,
    displayCardWidth: 36,
    displayCardHeight: 48,
    space: 8,
    boardWidthSpace: 6,
    boardHeightSpace: 6,
    cardFontSize: 30,
    markFontSize: 30,
    markAdjust: 20,
    state: 'loading'
  };

  config.url = 'http://157.7.200.224:3000';

  config.url = 'http://localhost:3000';

  config.displayCardWidth = config.cardFontSize * 2 - 11;

  config.displayCardHeight = config.cardFontSize;

  config.displayWidth = config.displayCardWidth * 2;

  config.displayHeight = Number(config.canvasHeight / 5);

  config.boxWidth = config.displayWidth;

  config.boxHeight = config.displayHeight - config.displayCardHeight - config.space;

  config.boardWidth = config.displayCardWidth * 5 + config.boardWidthSpace * 2;

  config.boardHeight = config.cardFontSize + config.boardHeightSpace * 2;

  config.fontSize = Number(config.boxHeight / 2);

  $(document).ready(function() {
    createCanvas();
    return setInterval(function() {
      return executeAjax();
    }, 500);
  });

  createCanvas = function() {
    var canvas, page;

    page = "<canvas id='canvas' width='" + config.canvasWidth + "' height='" + config.canvasHeight + "'> </canvas>";
    $('#canvasDiv').html(page);
    canvas = $('#canvas').get(0);
    canvas.width = config.canvasWidth;
    canvas.height = config.canvasHeight;
    return config.ctx = canvas.getContext("2d");
  };

  executeAjax = function() {
    return $.ajax({
      url: config.url,
      dataType: 'JSONP',
      jsonpCallback: 'callback',
      type: 'GET',
      success: function(json) {
        var board, player, players, _i, _len, _results;

        players = json.players;
        board = json.board;
        drawBackGround();
        _results = [];
        for (_i = 0, _len = players.length; _i < _len; _i++) {
          player = players[_i];
          drawBox(player.id);
          if (player.isActive === true) {
            drawPlayerHands(player.id, player.hand);
          }
          drawPlayerWinperAndName(player.id, player.win, player.name, player.isActive);
          if (board && board.length > 0) {
            _results.push(drawBoard(board));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
  };

  drawBackGround = function() {
    setColorAndFont('yellow', 0);
    return config.ctx.fillRect(0, 0, config.canvasWidth, config.canvasHeight);
  };

  drawBox = function(playerId) {
    var drawX, drawY, halfBoxHeight;

    playerId = Number(playerId);
    drawX = Math.floor(playerId / 5) * (config.canvasWidth - config.boxWidth);
    drawY = Math.floor(playerId % 5) * config.displayHeight + config.displayCardHeight;
    halfBoxHeight = Math.floor(config.boxHeight / 2);
    setColorAndFont('black', 0);
    config.ctx.fillRect(drawX, drawY, config.boxWidth, halfBoxHeight);
    setColorAndFont('white', 0);
    drawY += halfBoxHeight;
    return config.ctx.fillRect(drawX, drawY, config.boxWidth, halfBoxHeight);
  };

  drawPlayerHands = function(playerId, playerHands) {
    var drawX, drawY;

    drawX = Math.floor(playerId / 5) * (config.canvasWidth - config.boxWidth);
    drawY = Math.floor(playerId % 5) * config.displayHeight;
    if (playerHands && playerHands[0]) {
      drawcard(playerHands[0], drawX, drawY);
    }
    if (playerHands && playerHands[1]) {
      drawX += config.displayCardWidth;
      return drawcard(playerHands[1], drawX, drawY);
    }
  };

  drawPlayerWinperAndName = function(playerId, winPer, playerName, isActive) {
    var drawX, drawY;

    setColorAndFont('white', config.fontSize);
    drawX = Math.floor(playerId / 5) * (config.canvasWidth - config.boxWidth) + 3;
    drawY = Math.floor(playerId % 5) * config.displayHeight + config.displayCardHeight + config.fontSize - 2;
    if (playerName) {
      config.ctx.fillText(playerName, drawX, drawY);
    }
    drawY += config.fontSize;
    if (typeof isActive === 'undefined') {
      return;
    }
    setColorAndFont('black', config.fontSize);
    if (isActive === false) {
      config.ctx.fillText('Fold', drawX, drawY);
      return;
    }
    if (winPer) {
      return config.ctx.fillText(winPer, drawX, drawY);
    }
  };

  drawBoard = function(board) {
    var card, drawX, drawY, _i, _len, _results;

    setColorAndFont('green', 0);
    drawX = Number(config.canvasWidth / 2) - Number(config.boardWidth / 2);
    drawY = config.canvasHeight - config.boardHeight;
    config.ctx.fillRect(drawX, drawY, config.boardWidth, config.boardHeight);
    drawX += config.boardWidthSpace;
    drawY += config.boardHeightSpace;
    _results = [];
    for (_i = 0, _len = board.length; _i < _len; _i++) {
      card = board[_i];
      drawcard(card, drawX, drawY);
      _results.push(drawX += config.displayCardWidth);
    }
    return _results;
  };

  drawcard = function(card, x, y) {
    var drawX, drawY;

    setColorAndFont('white', 0);
    config.ctx.fillRect(x, y, config.cardFontSize * 2 - 11, config.cardFontSize);
    drawX = x + 2;
    drawY = y + config.cardFontSize - 3;
    switch (card.charAt(1)) {
      case 's':
        setColorAndFont('black', config.cardFontSize);
        config.ctx.fillText(card.charAt(0), drawX, drawY);
        setColorAndFont('black', config.markFontSize);
        return config.ctx.fillText('♠', drawX + config.markAdjust, drawY);
      case 'c':
        setColorAndFont('green', config.cardFontSize);
        config.ctx.fillText(card.charAt(0), drawX, drawY);
        setColorAndFont('green', config.markFontSize);
        return config.ctx.fillText('♣', drawX + config.markAdjust, drawY);
      case 'd':
        setColorAndFont('blue', config.cardFontSize);
        config.ctx.fillText(card.charAt(0), drawX, drawY);
        setColorAndFont('blue', config.markFontSize);
        return config.ctx.fillText('♦', drawX + config.markAdjust, drawY);
      case 'h':
        setColorAndFont('red', config.cardFontSize);
        config.ctx.fillText(card.charAt(0), drawX, drawY);
        setColorAndFont('red', config.markFontSize);
        return config.ctx.fillText('♥', drawX + config.markAdjust, drawY);
    }
  };

  setColorAndFont = function(color, size) {
    config.ctx.fillStyle = color;
    return config.ctx.font = "bold " + size + "px \'ITC HIGHLANDER\'";
  };

}).call(this);
